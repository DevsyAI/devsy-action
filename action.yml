name: "Devsy Action"
description: "GitHub Action for automated PR generation, updates, and plan creation using Claude Code"
author: "Devsy"
branding:
  icon: "code"
  color: "purple"

inputs:
  # === Claude Base Action Configuration ===
  anthropic_api_key:
    description: "Anthropic API key for Claude"
    required: false
  claude_code_oauth_token:
    description: "Claude Code OAuth token (alternative to anthropic_api_key)"
    required: false
    default: ""
  model:
    description: "Claude model to use"
    required: false
    default: "sonnet"
  custom_instructions:
    description: "Additional instructions for Claude"
    required: false
    default: ""
  allowed_tools:
    description: "Additional tools for Claude to use (base tools are always included)"
    required: false
    default: ""
  disallowed_tools:
    description: "Tools that Claude should never use"
    required: false
    default: ""
  use_bedrock:
    description: "Use AWS Bedrock for authentication"
    required: false
    default: "false"
  use_vertex:
    description: "Use Google Vertex for authentication"
    required: false
    default: "false"
  max_turns:
    description: "Maximum number of conversation turns for Claude"
    required: false
    default: "300"
  timeout_minutes:
    description: "Timeout in minutes for Claude Code execution"
    required: false
    default: "30"
  claude_env:
    description: "Environment variables to pass to Claude Code execution"
    required: false
    default: ""
  setup_script:
    description: "Path to setup script to run before Claude Code execution"
    required: false
    default: ""

  # === Devsy Action Configuration ===
  mode:
    description: "Action mode: pr-gen, pr-update, pr-review, or plan-gen"
    required: true
  pr_number:
    description: "PR number to update (for pr-update mode) or review (for pr-review mode)"
    required: false
  prompt:
    description: "The prompt to send to Claude Code (required for pr-gen and plan-gen modes)"
    required: false
    default: ""
  prompt_file:
    description: "Path to a file containing the prompt"
    required: false
    default: ""
  base_branch:
    description: "Base branch for creating new branches"
    required: false
    default: "main"

  # === GitHub Token Configuration ===
  backend_url:
    description: "Devsy backend URL for token exchange"
    required: false
    default: "https://devsy.ai"

  # === Callback Configuration ===
  callback_url:
    description: "URL to POST completion status and results"
    required: false
    default: ""
  callback_auth_token:
    description: "Bearer token for callback authentication"
    required: false
    default: ""
  callback_auth_header:
    description: "Custom auth header name (default: Authorization)"
    required: false
    default: "Authorization"

outputs:
  conclusion:
    description: "Execution status of the action"
    value: ${{ steps.run_claude.outputs.conclusion }}
  execution_file:
    description: "Path to the execution log file"
    value: ${{ steps.run_claude.outputs.execution_file }}
  pr_number:
    description: "PR number (for pr-gen and pr-update modes)"
    value: ${{ steps.extract_outputs.outputs.pr_number }}
  pr_url:
    description: "PR URL (for pr-gen and pr-update modes)"
    value: ${{ steps.extract_outputs.outputs.pr_url }}
  plan_output:
    description: "Plan content (for plan-gen mode)"
    value: ${{ steps.extract_outputs.outputs.plan_output }}
  token_source:
    description: "Authentication method used (devsy-bot or github-actions-bot)"
    value: ${{ steps.token_exchange.outputs.token_source }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install action requirements
      shell: bash
      run: |
        echo "Creating isolated environment for Devsy Action"
        python -m venv /tmp/devsy-action-env
        source /tmp/devsy-action-env/bin/activate
        pip install -r "${{ github.action_path }}/requirements.txt"

    - name: Validate inputs
      shell: bash
      env:
        DEVSY_MODE: ${{ inputs.mode }}
        DEVSY_ANTHROPIC_API_KEY: ${{ inputs.anthropic_api_key }}
        DEVSY_CLAUDE_CODE_OAUTH_TOKEN: ${{ inputs.claude_code_oauth_token }}
        DEVSY_USE_BEDROCK: ${{ inputs.use_bedrock }}
        DEVSY_USE_VERTEX: ${{ inputs.use_vertex }}
        DEVSY_PROMPT: ${{ inputs.prompt }}
        DEVSY_PROMPT_FILE: ${{ inputs.prompt_file }}
        DEVSY_PR_NUMBER: ${{ inputs.pr_number }}
      run: |
        /tmp/devsy-action-env/bin/python ${{ github.action_path }}/src/validate_inputs.py

    - name: Prepare prompt
      id: prepare_prompt
      shell: bash
      env:
        DEVSY_MODE: ${{ inputs.mode }}
        DEVSY_PROMPT: ${{ inputs.prompt }}
        DEVSY_PROMPT_FILE: ${{ inputs.prompt_file }}
        DEVSY_CUSTOM_INSTRUCTIONS: ${{ inputs.custom_instructions }}
        DEVSY_GITHUB_TOKEN: ${{ github.token }}
        DEVSY_REPO: ${{ github.repository }}
        DEVSY_BASE_BRANCH: ${{ inputs.base_branch }}
        DEVSY_PR_NUMBER: ${{ inputs.pr_number }}
      run: |
        /tmp/devsy-action-env/bin/python ${{ github.action_path }}/src/prepare_prompt.py

    - name: Exchange for devsy-bot GitHub App token
      id: token_exchange
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        DEVSY_BACKEND_URL: ${{ inputs.backend_url }}
      run: |
        echo "üîÑ Attempting to exchange GitHub Actions token for devsy-bot token..."

        # Run the Python token exchange script and capture output
        TOKEN_EXCHANGE_OUTPUT=$(/tmp/devsy-action-env/bin/python ${{ github.action_path }}/src/github_token_exchange.py 2>&1)
        TOKEN_EXCHANGE_EXIT_CODE=$?

        echo "$TOKEN_EXCHANGE_OUTPUT"

        if [ $TOKEN_EXCHANGE_EXIT_CODE -eq 0 ]; then
          # Check which token source was used
          if echo "$TOKEN_EXCHANGE_OUTPUT" | grep -q "Successfully exchanged token for devsy-bot"; then
            echo "token_source=devsy-bot" >> $GITHUB_OUTPUT
          else
            echo "token_source=github-actions-bot" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ö†Ô∏è  Token exchange script failed, using default GitHub token"
          echo "github_token=${{ github.token }}" >> $GITHUB_OUTPUT
          echo "token_source=github-actions-bot" >> $GITHUB_OUTPUT
        fi

    - name: Configure Git identity
      shell: bash
      env:
        GITHUB_TOKEN: ${{ steps.token_exchange.outputs.github_token }}
      run: |
        # Configure git identity based on the token source
        if [ "${{ steps.token_exchange.outputs.token_source }}" = "devsy-bot" ]; then
          # Get the bot's identity dynamically for verified commits
          BOT_INFO=$(gh api user --jq '{login: .login, id: .id}')
          BOT_LOGIN=$(echo "$BOT_INFO" | jq -r '.login')
          BOT_ID=$(echo "$BOT_INFO" | jq -r '.id')
          
          git config --global user.email "${BOT_ID}+${BOT_LOGIN}@users.noreply.github.com"
          git config --global user.name "$BOT_LOGIN"
          echo "‚úÖ Configured git identity for $BOT_LOGIN (ID: $BOT_ID)"
        else
          # Fallback to generic identity
          git config --global user.email "no-reply@devsy.ai"
          git config --global user.name "devsy-bot"
          echo "‚úÖ Configured git identity for Devsy Bot (fallback)"
        fi
        # Configure Git to use HTTPS instead of SSH for GitHub repositories
        # This enables pip to install private GitHub packages using the GitHub token
        git config --global url."https://github.com/".insteadOf git@github.com:

    - name: Checkout appropriate branch
      id: checkout_branch
      shell: bash
      env:
        DEVSY_MODE: ${{ inputs.mode }}
        DEVSY_PR_NUMBER: ${{ inputs.pr_number }}
        GITHUB_TOKEN: ${{ steps.token_exchange.outputs.github_token }}
        DEVSY_REPO: ${{ github.repository }}
      run: |
        /tmp/devsy-action-env/bin/python ${{ github.action_path }}/src/checkout_branch.py

    - name: Prepare MCP configuration
      id: prepare_mcp
      shell: bash
      env:
        DEVSY_MODE: ${{ inputs.mode }}
        GITHUB_TOKEN: ${{ steps.token_exchange.outputs.github_token }}
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        DEVSY_PR_NUMBER: ${{ inputs.pr_number }}
      run: |
        /tmp/devsy-action-env/bin/python ${{ github.action_path }}/src/prepare_mcp_config.py

    - name: Prepare tool configuration
      id: prepare_tools
      shell: bash
      env:
        DEVSY_MODE: ${{ inputs.mode }}
        DEVSY_MODEL: ${{ inputs.model }}
        DEVSY_MAX_TURNS: ${{ inputs.max_turns }}
        DEVSY_TIMEOUT_MINUTES: ${{ inputs.timeout_minutes }}
        DEVSY_CLAUDE_ENV: ${{ inputs.claude_env }}
        DEVSY_MCP_CONFIG: ${{ steps.prepare_mcp.outputs.mcp_config }}
        DEVSY_SYSTEM_PROMPT: ${{ fromJSON(steps.prepare_prompt.outputs.system_prompt) }}
      run: |
        /tmp/devsy-action-env/bin/python ${{ github.action_path }}/src/prepare_tools.py \
          --allowed-tools "${{ inputs.allowed_tools }}" \
          --disallowed-tools "${{ inputs.disallowed_tools }}"

    - name: Run setup script
      if: inputs.setup_script != ''
      shell: bash
      env:
        GITHUB_TOKEN: ${{ steps.token_exchange.outputs.github_token }}
      run: |
        echo "üîß Running setup script: ${{ inputs.setup_script }}"
        if [ -f "${{ inputs.setup_script }}" ]; then
          chmod +x "${{ inputs.setup_script }}"
          "${{ inputs.setup_script }}"
          echo "‚úÖ Setup script completed successfully"
        else
          echo "‚ùå Setup script not found: ${{ inputs.setup_script }}"
          echo "‚ùå Proceeding with execution, though some tools may not work as expected"
        fi

    - name: Run Claude Code with git and gh tools
      id: run_claude
      uses: anthropics/claude-code-base-action@main
      with:
        prompt: ${{ fromJSON(steps.prepare_prompt.outputs.user_prompt) }}
        settings: ${{ steps.prepare_tools.outputs.settings }}
        claude_args: ${{ steps.prepare_tools.outputs.claude_args }}
        anthropic_api_key: ${{ inputs.anthropic_api_key }}
        claude_code_oauth_token: ${{ inputs.claude_code_oauth_token }}
        use_bedrock: ${{ inputs.use_bedrock }}
        use_vertex: ${{ inputs.use_vertex }}
      env:
        # GitHub CLI authentication
        GITHUB_TOKEN: ${{ steps.token_exchange.outputs.github_token }}
        
        # AWS Bedrock configuration (when use_bedrock is true)
        AWS_REGION: ${{ env.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}

        # Google Vertex AI configuration (when use_vertex is true)
        ANTHROPIC_VERTEX_PROJECT_ID: ${{ env.ANTHROPIC_VERTEX_PROJECT_ID }}
        CLOUD_ML_REGION: ${{ env.CLOUD_ML_REGION }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

    - name: Extract outputs from execution
      id: extract_outputs
      shell: bash
      run: |
        /tmp/devsy-action-env/bin/python ${{ github.action_path }}/src/extract_outputs.py \
          --execution-file "${{ steps.run_claude.outputs.execution_file }}" \
          --mode "${{ inputs.mode }}"

    - name: Send callback notification
      if: inputs.callback_url != ''
      shell: bash
      env:
        DEVSY_CALLBACK_URL: ${{ inputs.callback_url }}
        DEVSY_RUN_ID: ${{ github.run_id }}
        DEVSY_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        DEVSY_MODE: ${{ inputs.mode }}
        DEVSY_CONCLUSION: ${{ steps.run_claude.outputs.conclusion }}
        DEVSY_PR_NUMBER: ${{ steps.extract_outputs.outputs.pr_number }}
        DEVSY_PR_URL: ${{ steps.extract_outputs.outputs.pr_url }}
        DEVSY_PLAN_OUTPUT: ${{ steps.extract_outputs.outputs.plan_output }}
        DEVSY_EXECUTION_FILE: ${{ steps.run_claude.outputs.execution_file }}
        DEVSY_TOKEN_SOURCE: ${{ steps.token_exchange.outputs.token_source }}
        DEVSY_AUTH_TOKEN: ${{ inputs.callback_auth_token }}
        DEVSY_AUTH_HEADER: ${{ inputs.callback_auth_header }}
        DEVSY_REPOSITORY: ${{ github.repository }}
      run: |
        /tmp/devsy-action-env/bin/python ${{ github.action_path }}/src/send_callback.py

    - name: Revoke devsy-bot token
      if: always() && steps.token_exchange.outputs.token_source == 'devsy-bot'
      shell: bash
      run: |
        echo "üßπ Revoking devsy-bot token for security..."
        curl -L \
        -X DELETE \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${{ steps.token_exchange.outputs.github_token }}" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        ${GITHUB_API_URL:-https://api.github.com}/installation/token
