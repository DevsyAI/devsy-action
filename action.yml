name: "Devsy Action"
description: "GitHub Action for automated PR generation, updates, and plan creation using Claude Code"
author: "Devsy"
branding:
  icon: "code"
  color: "purple"

inputs:
  # === Claude Base Action Configuration ===
  anthropic_api_key:
    description: "Anthropic API key for Claude"
    required: true
  model:
    description: "Claude model to use"
    required: false
    default: "sonnet"
  custom_instructions:
    description: "Additional instructions for Claude"
    required: false
    default: ""
  allowed_tools:
    description: "Additional tools for Claude to use (base tools are always included)"
    required: false
    default: ""
  disallowed_tools:
    description: "Tools that Claude should never use"
    required: false
    default: ""
  use_bedrock:
    description: "Use AWS Bedrock for authentication"
    required: false
    default: "false"
  use_vertex:
    description: "Use Google Vertex for authentication"
    required: false
    default: "false"
  max_turns:
    description: "Maximum number of conversation turns for Claude"
    required: false
    default: "200"
  timeout_minutes:
    description: "Timeout in minutes for Claude Code execution"
    required: false
    default: "10"

  # === Devsy Action Configuration ===
  mode:
    description: "Action mode: pr-gen, pr-update, or plan-gen"
    required: true
  pr_number:
    description: "PR number to update (for pr-update mode)"
    required: false
  prompt:
    description: "The prompt to send to Claude Code (required for pr-gen and plan-gen modes)"
    required: false
    default: ""
  prompt_file:
    description: "Path to a file containing the prompt"
    required: false
    default: ""
  base_branch:
    description: "Base branch for creating new branches"
    required: false
    default: "main"

  # === GitHub Token Configuration ===
  backend_url:
    description: "Devsy backend URL for token exchange"
    required: false
    default: "https://devsy.ai"

  # === Callback Configuration ===
  callback_url:
    description: "URL to POST completion status and results"
    required: false
    default: ""
  callback_auth_token:
    description: "Bearer token for callback authentication"
    required: false
    default: ""
  callback_auth_header:
    description: "Custom auth header name (default: Authorization)"
    required: false
    default: "Authorization"

outputs:
  conclusion:
    description: "Execution status of the action"
    value: ${{ steps.run_claude.outputs.conclusion }}
  execution_file:
    description: "Path to the execution log file"
    value: ${{ steps.run_claude.outputs.execution_file }}
  pr_number:
    description: "PR number (for pr-gen and pr-update modes)"
    value: ${{ steps.extract_outputs.outputs.pr_number }}
  pr_url:
    description: "PR URL (for pr-gen and pr-update modes)"
    value: ${{ steps.extract_outputs.outputs.pr_url }}
  plan_output:
    description: "Plan content (for plan-gen mode)"
    value: ${{ steps.extract_outputs.outputs.plan_output }}
  token_source:
    description: "Authentication method used (devsy-bot or github-actions-bot)"
    value: ${{ steps.token_exchange.outputs.token_source }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install action requirements
      shell: bash
      run: |
        echo "Creating isolated environment for Devsy Action"
        python -m venv /tmp/devsy-action-env
        source /tmp/devsy-action-env/bin/activate
        pip install -r "${{ github.action_path }}/requirements.txt"

    - name: Configure Git identity
      shell: bash
      run: |
        git config --global user.email "no-reply@devsy.ai"
        git config --global user.name "Devsy Bot"

    - name: Validate inputs
      shell: bash
      run: |
        /tmp/devsy-action-env/bin/python ${{ github.action_path }}/src/validate_inputs.py \
          --mode "${{ inputs.mode }}" \
          --anthropic-api-key "${{ inputs.anthropic_api_key }}" \
          --use-bedrock "${{ inputs.use_bedrock }}" \
          --use-vertex "${{ inputs.use_vertex }}" \
          --prompt "${{ inputs.prompt }}" \
          --prompt-file "${{ inputs.prompt_file }}" \
          --pr-number "${{ inputs.pr_number }}"

    - name: Prepare prompt
      id: prepare_prompt
      shell: bash
      run: |
        # Set up the prompt based on mode
        args=(
          "--mode" "${{ inputs.mode }}"
          "--prompt" "${{ inputs.prompt }}"
          "--prompt-file" "${{ inputs.prompt_file }}"
          "--custom-instructions" "${{ inputs.custom_instructions }}"
          "--github-token" "${{ github.token }}"
          "--repo" "${{ github.repository }}"
          "--base-branch" "${{ inputs.base_branch }}"
        )

        # Only add pr-number if it's not empty
        if [[ -n "${{ inputs.pr_number }}" ]]; then
          args+=("--pr-number" "${{ inputs.pr_number }}")
        fi

        /tmp/devsy-action-env/bin/python ${{ github.action_path }}/src/prepare_prompt.py "${args[@]}"

    - name: Exchange for devsy-bot GitHub App token
      id: token_exchange
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        DEVSY_BACKEND_URL: ${{ inputs.backend_url }}
      run: |
        echo "🔄 Attempting to exchange GitHub Actions token for devsy-bot token..."

        # Run the Python token exchange script and capture output
        TOKEN_EXCHANGE_OUTPUT=$(/tmp/devsy-action-env/bin/python ${{ github.action_path }}/src/github_token_exchange.py 2>&1)
        TOKEN_EXCHANGE_EXIT_CODE=$?

        echo "$TOKEN_EXCHANGE_OUTPUT"

        if [ $TOKEN_EXCHANGE_EXIT_CODE -eq 0 ]; then
          # Check which token source was used
          if echo "$TOKEN_EXCHANGE_OUTPUT" | grep -q "Successfully exchanged token for devsy-bot"; then
            echo "token_source=devsy-bot" >> $GITHUB_OUTPUT
          else
            echo "token_source=github-actions-bot" >> $GITHUB_OUTPUT
          fi
        else
          echo "⚠️  Token exchange script failed, using default GitHub token"
          echo "github_token=${{ github.token }}" >> $GITHUB_OUTPUT
          echo "token_source=github-actions-bot" >> $GITHUB_OUTPUT
        fi

    - name: Prepare tool configuration
      id: prepare_tools
      shell: bash
      run: |
        /tmp/devsy-action-env/bin/python ${{ github.action_path }}/src/prepare_tools.py \
          --allowed-tools "${{ inputs.allowed_tools }}" \
          --disallowed-tools "${{ inputs.disallowed_tools }}"

    - name: Run Claude Code with GitHub MCP
      id: run_claude
      uses: anthropics/claude-code-base-action@main
      with:
        prompt: ${{ fromJSON(steps.prepare_prompt.outputs.user_prompt) }}
        system_prompt: ${{ fromJSON(steps.prepare_prompt.outputs.system_prompt) }}
        anthropic_api_key: ${{ inputs.anthropic_api_key }}
        model: ${{ inputs.model }}
        max_turns: ${{ inputs.max_turns }}
        timeout_minutes: ${{ inputs.timeout_minutes }}
        allowed_tools: ${{ steps.prepare_tools.outputs.allowed_tools }}
        disallowed_tools: ${{ steps.prepare_tools.outputs.disallowed_tools }}
        use_bedrock: ${{ inputs.use_bedrock }}
        use_vertex: ${{ inputs.use_vertex }}
      env:
        # GitHub CLI authentication
        GITHUB_TOKEN: ${{ steps.token_exchange.outputs.github_token }}
        
        # AWS Bedrock configuration (when use_bedrock is true)
        AWS_REGION: ${{ env.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}

        # Google Vertex AI configuration (when use_vertex is true)
        ANTHROPIC_VERTEX_PROJECT_ID: ${{ env.ANTHROPIC_VERTEX_PROJECT_ID }}
        CLOUD_ML_REGION: ${{ env.CLOUD_ML_REGION }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

    - name: Extract outputs from execution
      id: extract_outputs
      shell: bash
      run: |
        /tmp/devsy-action-env/bin/python ${{ github.action_path }}/src/extract_outputs.py \
          --execution-file "${{ steps.run_claude.outputs.execution_file }}" \
          --mode "${{ inputs.mode }}"

    - name: Send callback notification
      if: inputs.callback_url != ''
      shell: bash
      run: |
        /tmp/devsy-action-env/bin/python ${{ github.action_path }}/src/send_callback.py \
          --callback-url "${{ inputs.callback_url }}" \
          --run-id "${{ github.run_id }}" \
          --run-url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
          --mode "${{ inputs.mode }}" \
          --conclusion "${{ steps.run_claude.outputs.conclusion }}" \
          --pr-number "${{ steps.extract_outputs.outputs.pr_number }}" \
          --pr-url "${{ steps.extract_outputs.outputs.pr_url }}" \
          --plan-output "${{ steps.extract_outputs.outputs.plan_output }}" \
          --execution-file "${{ steps.run_claude.outputs.execution_file }}" \
          --token-source "${{ steps.token_exchange.outputs.token_source }}" \
          --auth-token "${{ inputs.callback_auth_token }}" \
          --auth-header "${{ inputs.callback_auth_header }}" \
          --repository "${{ github.repository }}"
